#Gabrielle Beaulieu
#assignment 5
#CSCI B 9/16/15
#Extra points: mode function, quartile function, additional analysis

#==============================================================================
# Analysis of ages in 1995 census. The oldest person was 90 years old.
# The youngest person was 0. The average was about 35.7 years old, and
# the standard deviation was 22.5 (meaning that about 68% of people 
# surveyed are within 22.5 years of the mean age).

# File contained 35325 entries
# Max: 90
# Min: 0
# Average: 35.73129511677283
# Median: 34
# Std. dev: 22.54531380680916
# Mode: 34
# Quartile 1: 17.0
# Quartile 3: 51.0

# frequencies(x)
# data	frequency
# 0	466
# 1	511
# 2	544
# 3	533
# 4	602
# 5	591
# 6	537
# 7	515
# 8	519
# 9	510
# 10	477
# 11	514
# 12	508
# 13	500
# 14	501
# 15	496
# 16	490
# 17	480
# 18	419
# 19	406
# 20	432
# 21	397
# 22	403
# 23	435
# 24	494
# 25	502
# 26	454
# 27	489
# 28	536
# 29	525
# 30	600
# 31	569
# 32	560
# 33	555
# 34	605
# 35	592
# 36	593
# 37	541
# 38	548
# 39	595
# 40	569
# 41	550
# 42	548
# 43	501
# 44	569
# 45	515
# 46	526
# 47	561
# 48	522
# 49	433
# 50	396
# 51	382
# 52	387
# 53	341
# 54	371
# 55	311
# 56	310
# 57	290
# 58	255
# 59	293
# 60	296
# 61	252
# 62	275
# 63	263
# 64	314
# 65	281
# 66	254
# 67	285
# 68	278
# 69	272
# 70	283
# 71	285
# 72	254
# 73	262
# 74	256
# 75	204
# 76	202
# 77	188
# 78	188
# 79	165
# 80	164
# 81	153
# 82	122
# 83	110
# 84	126
# 85	89
# 86	65
# 87	53
# 88	53
# 89	49
# 90	110

#==============================================================================
# Comparison of data from Toy Story and Jumanji. The average rating of 
# Jumanji was about 3.2, while the average of Toy Story was about 4.14. 
# Both movies recieved ratings 1 - 5. The most common rating for Toy Story 
# was a 4, while the most common rating for Jumanji was a 3, suggesting
# that audiences in general liked Toy Story more than Jumanji.

# JUMANJI
# File contained 701 entries
# Max: 5
# Min: 1
# Average: 3.20114122681883
# Median: 3
# Std. dev: 0.9831720435251046
# Mode: 3
# Quartile 1: 3
# Quartile 3: 4

# frequencies(x)
# data	frequency
# 1	42
# 2	108
# 3	266
# 4	237
# 5	48

# TOY STORY
# File contained 2077 entries
# Max: 5
# Min: 1
# Average: 4.146846413095811
# Median: 4
# Std. dev: 0.8523490842765928   
# Mode: 4
# Quartile 1: 4
# Quartile 3: 5

# frequencies(x)
# data	frequency
# 1	16
# 2	61
# 3	345
# 4	835
# 5	820
#==============================================================================
# Extra points: Analysis of presidents' ages
# The average presidential age upon inaugeration was a little over 54, with
# the middle 50% falling between 51 and 57.5. This makes current 2016 
# candidacy frontrunners seem rather old by comparison (Donald
# Trump would be 70, Hillary Clinton 69, and Bernie Sanders 75).
#
# File contained 44 entries
# Max: 69
# Min: 42
# Average: 54.61363636363637
# Median: 54.5
# Std. dev: 6.195331734988363
# Mode: 51
# Quartile 1: 51.0
# Quartile 3: 57.5

# frequencies(x)
# data	frequency
# 42	1
# 43	1
# 46	2
# 47	2
# 48	1
# 49	2
# 50	1
# 51	5
# 52	2
# 54	5
# 55	4
# 56	3
# 57	4
# 58	1
# 60	1
# 61	3
# 62	2
# 64	1
# 65	1
# 68	1
# 69	1
#==============================================================================

def read_text(file):
    """
    Converts words or numbers in a file to list. 
    """
    textfile = open(file, "r")
    text = []
    for line in textfile:
        text.append(int(line.strip()))
    textfile.close()
    return text


def average_value(list1):
    """
    Determines average value of list of numbers (of type string)
    """
    sum = 0
    for i in range(len(list1)):
        a = int(list1[i])
        sum = sum + a
    av = sum/(len(list1))
    return av


def list_median(list1):
    """
    Returns the median (as type int) of a given list of numbers
    """
    list1.sort()
    if (len(list1)% 2) != 0:
        med = list1[len(list1)//2]
    else:
        num1 = list1[len(list1)//2 - 1]
        num2 = list1[len(list1)//2]
        med = (int(num1)+int(num2))/2
    return med
    
    
def standard_dev(list1):
    """
    Returns the standard deviation of a given list of numbers
    """
    sum = 0
    av = average_value(list1)
    for i in range(len(list1)):
        dif = int(list1[i]) - av
        difsq = dif ** 2
        sum = sum + difsq
    sumdiv = sum / (len(list1)-1)
    stddev = sumdiv ** 0.5
    return stddev
    
    
def list_mode(list1):
    """
    Rreturns mode of a list of data
    """
    list1.sort()
    numfreq = 1
    count = 0
    previous = list1[0]
    
    for d in list1:
        if d == previous:
            count += 1
            if count > numfreq:
                numfreq = count
                mode = d
        else:
            count = 1
        
        previous = d
    return mode
       
       
def quart(list1,num):
    """
    Returns first or third quartile of a list. Insert value 1 or 3 for num
    """
    list1.sort()
    if num < 2:
        if len(list1[:len(list1)//2])% 2 ==0:
            num1 = list1[len(list1)//4 - 1]
            num2 = list1[len(list1)//4]
            q1 = (int(num1)+int(num2))/2
            return q1
        else:
            q1 = list1[len(list1)//4]
            return q1

    else:
        if len(list1[:len(list1)//2])% 2 ==0:
            num1 = list1[len(list1) - len(list1)//4 -1]
            num2 = list1[len(list1) - len(list1)//4]
            q3 = (int(num1)+int(num2))/2
            return q3
        else:
            q3 = list1[len(list1)//4 * 3]
            return q3
   
   
def frequencies(data):
    """
    Prints the frequency of each item in the list data
    """
    data.sort()
    
    count = 0
    previous = data[0]
    print("data\tfrequency") # '\t' is the TAB character

    for d in data:
        if d == previous:
            # same as the previous, so just increment the count
            count += 1
        else:
            # we've found a new item so print out the old and reset the count
            print(str(previous) + "\t" + str(count))
            count = 1

        previous = d
    print(str(previous) + "\t" + str(count))
     
     
filename = input("Enter file name to analyze: ")
x = read_text(filename)

print("File contained " + str(len(x)) + " entries")
print("Max: " + str(max(x)))
print("Min: " + str(min(x)))
print("Average: " + str(average_value(x)))
print("Median: " +str(list_median(x)))
print("Std. dev: " + str(standard_dev(x)))
print("Mode: " + str(list_mode(x)))
print("Quartile 1: " + str(quart(x,1)))
print("Quartile 3: " + str(quart(x,3)))
